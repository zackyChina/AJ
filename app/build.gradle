// apply plugin: 'com.android.application'

// android {
//     compileSdkVersion 28
//     defaultConfig {
//         applicationId "com.example.root.mya"
//         minSdkVersion 15
//         targetSdkVersion 28
//         versionCode 1
//         versionName "1.0"
//         testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
//     }
//     buildTypes {
//         release {
//             minifyEnabled false
//             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//         }
//     }
// }

// dependencies {
//     implementation fileTree(dir: 'libs', include: ['*.jar'])
//     implementation 'com.android.support:appcompat-v7:28.0.0-rc02'
//     implementation 'com.android.support.constraint:constraint-layout:1.1.3'
//     testImplementation 'junit:junit:4.12'
//     androidTestImplementation 'com.android.support.test:runner:1.0.2'
//     androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
// }
apply plugin: 'com.android.application'
apply plugin: 'jacoco'





android {
    compileSdkVersion 27
    testOptions {
        unitTests {
            includeAndroidResources = true
        }

        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    defaultConfig {
        applicationId "com.example.root.mya"
        minSdkVersion 24
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
        }
        debug {
            zipAlignEnabled false
            testCoverageEnabled = true
        }
    }
    buildToolsVersion '27.0.3'
    productFlavors {
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation 'com.android.support:support-v13:27.1.0'
    implementation 'com.android.support:design:27.1.0'

    implementation 'io.reactivex:rxjava:1.1.9'
    implementation 'io.reactivex:rxandroid:1.2.1'

    //Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'


    //instrumentation
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    //robolectric
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:3.8'
    //assertj
    testImplementation 'org.assertj:assertj-core:1.7.0'
    //mockito
    testImplementation "org.mockito:mockito-android:2.8.9"
    //PowerMock
    testImplementation 'org.powermock:powermock-api-mockito:1.6.6'

    implementation 'io.qameta.allure:allure-gradle:2.4'
    testImplementation 'io.qameta.allure:allure-gradle:2.4'

    testImplementation 'com.squareup.okhttp3:mockwebserver:3.6.0'
    testImplementation 'org.robolectric:shadows-httpclient:3.0'

}


jacoco {
    toolVersion = "0.7.5" // "0.7.1.201405082137"
}
//这里定义为你想要进行代码覆盖率统计的java目录
def coverageSourceDirs = ['src/main/java']
task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for CHJ"
    //这里为编译后产生的.class文件目录，excludes为你不想进行代码覆盖率统计的文件
    classDirectories = fileTree(dir: '../app/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*'])
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    //代码覆盖率报告的生成文件目录
    executionData = files('../app/build/jacoco/testDebugUnitTest.exec')
    //这里为生成报告的类型
    reports {
        xml.enabled = true
        html.enabled = true
    }
}


sonarqube {
    properties {
        property "sonar.projectKey", "my:project"
        property "sonar.projectName", "AJ"
        property "sonar.projectVersion", "1.0"
        property "sonar.exclusions", "robospice/**/*"
        property "sonar.host.url", "http://localhost:9000/sonar" // TODO: - Setup your Sonarqube server address

        property "sonar.sources", "src/main/java"
        property "sonar.binaries", "build/intermediates/classes/debug"
        property "sonar.java.binaries", "build/intermediates/classes/debug"
        property "sonar.tests", "src/test/java, src/androidTest/java"
        property "sonar.java.test.binaries", "build/intermediates/classes/debug"

        def unit = fileTree(dir: project.projectDir, includes: ['**/*.exec']).files;
        def ui = fileTree(dir: project.projectDir, includes: ['**/*.ec']).files;
        unit.addAll(ui);
        def files = unit.join(", ");

        property "sonar.jacoco.reportPaths", files
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportsPath", "build/test-results/testDebugUnitTest"
        property "sonar.android.lint.report", "build/reports/lint-results.xml"
    }
}